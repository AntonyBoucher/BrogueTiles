<html>
<head>
<meta charset="utf-8" />
<style>
body {
    color: black;
    background-color: #ccc;
}
canvas, img {
    display: inline;
    background-color: #000;
    border: 0px;
    margin-right: 5px;
    vertical-align: top;
}
.choice {
    color: blue;
    text-decoration: underline;
    cursor: pointer;
}
</style>
</head>
<body>
<p>This page uses a VERY SLOW algorithm for sharpening. Please be patient! It takes ~20 minutes to complete.</p>
<p>Choose aspect ratio (sharp, slow):
    <span class="choice" onclick="generate('default',true)">Default</span>
    <span class="choice" onclick="generate('16:9',true)">16:9</span>
    <span class="choice" onclick="generate('16:10',true)">16:10</span>
    <span class="choice" onclick="generate('4:3',true)">4:3</span>
</p>
<p>Choose aspect ratio (blurry, fast):
    <span class="choice" onclick="generate('default',false)">Default</span>
    <span class="choice" onclick="generate('16:9',false)">16:9</span>
    <span class="choice" onclick="generate('16:10',false)">16:10</span>
    <span class="choice" onclick="generate('4:3',false)">4:3</span>
</p>
<image id="hi-res" src="./tiles.svg" style="display: none">
<script>


function ToImageData(width, height, vector) {
    const canvas = document.createElement("canvas");
    canvas.width = width;
    canvas.height = height;
    const ctx = canvas.getContext("2d");
    const data = ctx.getImageData(0, 0, width, height);
    for (let y = 0; y < height; y++) {
        for (let x = 0; x < width; x++) {
            let value = vector[x + y * width]; // linear 0..1
            value = Math.sqrt(value) * 255; // gamma-compressed 0..255
            value = Math.min(Math.max(Math.round(value), 0), 255);
            const index = (x + y * width) * 4;
            data.data[index+0] = 255;
            data.data[index+1] = 255;
            data.data[index+2] = 255;
            data.data[index+3] = value;
        }
    }
    return data;
}

function Sharpen(width, height, vector) {
    if (width >= 20) return vector; // not needed for large tiles
    const v = Float64Array.from(vector);
    const f = (x,y) => v[x+y*width];
    const strength = 48;
    for (let y = 1; y < height-1; y++) {
        for (let x = 1; x < width-1; x++) {
            vector[x+y*width] = (
                f(x,y) * strength
                - (f(x-1, y) + f(x+1, y) + f(x, y-1) + f(x, y+1)) * 2
                - (f(x-1, y-1) + f(x+1, y+1) + f(x-1, y+1) + f(x+1, y-1))
            ) / (strength - 12);
        }
    }
    return vector;
}

function ComputeSum(vector) {
    return vector.reduce((a, b) => a + (b < 0.5 ? b : 1-b), 0);
}

function Downscale(idata, sw, sh, dw, dh, dx1, dx2, dx3, dy1, dy2, dy3) {
    const x1 = Math.round((1 + dx1) * sw / dw);
    const x2 = Math.round((dw/2 + dx1) * sw / dw);
    const x3 = Math.round((dw - 1 + dx2) * sw / dw);
    const y1 = Math.round((1 + dy1) * sh / dh);
    const y2 = Math.round((dh/2 + dy1) * sh / dh);
    const y3 = Math.round((dh - 1 + dy2) * sh / dh);

    const dxLU = new Int32Array(sw);
    for (let sx = 0; sx < sw; sx++) {
        if (sx < x1) dxLU[sx] = 0;
        else if (sx >= x3) dxLU[sx] = dw-1;
        else if (sx < x2) dxLU[sx] = Math.floor((dw/2-1)*(sx-x1)/(x2-x1) + 1);
        else dxLU[sx] = Math.floor((dw/2-1)*(sx-x2)/(x3-x2) + dw/2);
    }

    const dyLU = new Int32Array(sh);
    for (let sy = 0; sy < sh; sy++) {
        if (sy < y1) dyLU[sy] = 0;
        else if (sy >= y3) dyLU[sy] = dh-1;
        else if (sy < y2) dyLU[sy] = Math.floor((dh/2-1)*(sy-y1)/(y2-y1) + 1);
        else dyLU[sy] = Math.floor((dh/2-1)*(sy-y2)/(y3-y2) + dh/2);
    }

    const value = new Float64Array(dw * dh);
    const count = new Float64Array(dw * dh);

    let si = 0;
    const data = idata.data;
    for (let sy = 0; sy < sh; sy++) {
        const dy = dyLU[sy];
        for (let sx = 0; sx < sw; sx++) {
            const dx = dxLU[sx];
            const di = dx+dy*dw;
            let v = (data[si+1] / 255) * (data[si+3] / 255);
            v = v*v; // gamma 2.0
            value[di] += v;
            count[di] += 1;
            si += 4;
        }
    }

    for (let i = 0; i < dw*dh; i++) value[i] /= count[i];
    return value;
}

function Resize(idata, sw, sh, dw, dh, subpixel) {
    const step = 0.1; // pixels
    const choices = [];
    for (a = -5; a <= 5; a++)
        for (b = -10; b <= 10; b++)
            for (c = -5; c <= 5; c++)
                choices.push([a,b,c]);

    // find best horizontal shifts
    let hshifts = [0, 0, 0, 1e20];
    if (subpixel)
    for (shifts of choices) {
        const resized = Downscale(idata, sw, sh, dw, dh,
            shifts[0]*step, shifts[1]*step, shifts[2]*step,
            0, 0, 0);
        const sum = ComputeSum(resized);
        if (sum < hshifts[3]) hshifts = [shifts[0], shifts[1], shifts[2], sum];
    }

    // find best vertical shifts
    let vshifts = [0, 0, 0, 1e20];
    if (subpixel)
    for (shifts of choices) {
        const resized = Downscale(idata, sw, sh, dw, dh,
            hshifts[0]*step, hshifts[1]*step, hshifts[2]*step,
            shifts[0]*step, shifts[1]*step, shifts[2]*step)
        const sum = ComputeSum(resized);
        if (sum < vshifts[3]) vshifts = [shifts[0], shifts[1], shifts[2], sum];
    }

    return  ToImageData(dw, dh,
                Sharpen(dw, dh,
                    Downscale(idata, sw, sh, dw, dh,
                        hshifts[0]*step, hshifts[1]*step, hshifts[2]*step,
                        vshifts[0]*step, vshifts[1]*step, vshifts[2]*step)));
}

function Noise(w, h) {
    const canvas = document.createElement("canvas");
    canvas.width = w;
    canvas.height = h;
    const ctx = canvas.getContext("2d");
    const idata = ctx.getImageData(0, 0, w, h);
    for (let i = 0; i < idata.data.length; i++) idata.data[i] = 255;
    for (let i = 3; i < idata.data.length; i+=4) idata.data[i] = 0;

    const freq = 9;
    let rnd_state = 0;
    const rand = () => {
        rnd_state = (rnd_state * 69069 + 1234567) % 0x100000000;
        return rnd_state / 0x100000000;
    };

    for (let x = 0; x < w; x+=3) {
        for (let y = 0; y < h; y+=3) {
            z = (rand()*4)|0;
            x2 = x + [0,0,1,1][z];
            y2 = y + [0,1,0,1][z];
            if (x2 < w-1 && y2 < h-1) idata.data[(x2+y2*w)*4+3] = (32+32*rand()*rand())|0;
        }
    }

    const f = (x,y) => idata.data[((x%w)+(y%h)*w)*4+3];
    for (let y = 0; y < h; y++) {
        for (let x = 0; x < w; x++) {
            if ( f(x+1,y)+f(x+1,y+1)+f(x+1,y-1)
                +f(x-1,y)+f(x-1,y+1)+f(x-1,y-1)
                +f(x,y)+f(x,y+1)+f(x,y-1) == 0) {
                idata.data[(x+y*w)*4+3] = (32+32*rand()*rand())|0;
            }
        }
    }

    return idata;
}

function generate(aspectratio, subpixel) {
    for (let size = 1; size <= 15; size++) {
        let p = document.createElement("p");
        p.innerText = `Size ${size}:`;
        p.appendChild(build(size, aspectratio, subpixel));
        document.body.appendChild(p);
    }
}

function build(sizeIndex, aspectRatio, subPixelPositioning) {
    let outputTileWidths;
    let outputTileHeights;

    if (aspectRatio == '16:9') {
        outputTileWidths  = [ 7,  8,  9, 10, 11, 12, 13, 15, 16, 17, 19, 22, 25, 31, 38];
        outputTileHeights = [11, 13, 14, 16, 18, 20, 22, 24, 26, 28, 31, 36, 42, 52, 63];
    } else if (aspectRatio == '16:10') {
        outputTileWidths  = [ 7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 23, 25];
        outputTileHeights = [13, 15, 17, 18, 20, 23, 24, 26, 28, 29, 31, 35, 39, 43, 47];
    } else if (aspectRatio == '4:3') {
        outputTileWidths  = [ 7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21];
        outputTileHeights = [15, 18, 20, 22, 24, 26, 29, 31, 33, 35, 38, 40, 42, 44, 46];
    } else {
        outputTileWidths  = [ 7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 24, 27];
        outputTileHeights = [11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 38, 44, 49];
    }

    // tile counts
    const numCols = 16;
    const numRows = 8;

    // tile size
    const outputTileWidth = outputTileWidths[sizeIndex-1];
    const outputTileHeight = outputTileHeights[sizeIndex-1];
    const sourceTileWidth = Math.min(200, outputTileWidth*10);
    const sourceTileHeight = Math.min(400, outputTileHeight*10);

    // canvas size
    const outputCanvasWidth = outputTileWidth * numCols;
    const outputCanvasHeight = outputTileHeight * numRows;
    const sourceCanvasWidth = sourceTileWidth * numCols;
    const sourceCanvasHeight = sourceTileHeight * numRows;

    // output canvas
    const outputCanvas = document.createElement("canvas");
    outputCanvas.width = outputCanvasWidth;
    outputCanvas.height = outputCanvasHeight;
    const outputCtx = outputCanvas.getContext("2d");

    // source canvas
    const sourceCanvas = document.createElement("canvas");
    sourceCanvas.width = sourceCanvasWidth;
    sourceCanvas.height = sourceCanvasHeight;
    const sourceCtx = sourceCanvas.getContext("2d");
    const svgImage = document.getElementById("hi-res");
    sourceCtx.drawImage(svgImage, 0, 0, sourceCanvas.width, sourceCanvas.height);

    // resize tiles
    for (let r = 0; r < numRows; r++) {
        for (let c = 0; c < numCols; c++) {
            const bigTile = sourceCtx.getImageData(c*sourceTileWidth, r*sourceTileHeight, sourceTileWidth, sourceTileHeight);
            let targetWidth;
            let targetHeight;
            if (   r == 0 && (c == 2 || c == 4 || c == 6 || c == 10 || c == 11 || c == 12 || c == 13 || c == 14 || c == 15)
                || r == 1 && (c == 0 || c == 1 || c == 3 || c == 5)
                || r == 2 && (c == 13)
                || r == 4 && (c == 1 || c == 3 || c == 15)
                || r == 6 && (c == 4 || c == 5 || c == 6 || c == 7 || c == 10)
                || r == 7 && (c == 4 || c == 10 || c == 11 || c == 12) )
            {
                // These tiles will stretch to fill the whole space.
                targetWidth = outputTileWidth;
                targetHeight = outputTileHeight;
            }
            else if (outputTileHeight >= outputTileWidth*29/16) {
                // Target tile is tall and narrow. Fit the width.
                targetWidth = outputTileWidth;
                // Stretch vertically up to 10%.
                targetHeight = Math.min(outputTileHeight, targetWidth*29/16*1.1);
            }
            else {
                // Target tile is wide.
                // How tall is the source tile if we ignore blank space at the top and bottom?
                let actualSourceHeight = sourceTileHeight;
                for (let y = 0; y < sourceTileHeight/3; y++) {
                    let blank = true;
                    for (let x = 0; x < sourceTileWidth; x++) {
                        let idx = (x+y*sourceTileWidth)*4;
                        if (bigTile.data[idx+1] * bigTile.data[idx+3] > 512) blank = false;
                        idx = (x+(sourceTileHeight-1-y)*sourceTileWidth)*4;
                        if (bigTile.data[idx+1] * bigTile.data[idx+3] > 512) blank = false;
                    }
                    if (!blank) break;
                    actualSourceHeight -= 2;
                }
                // Fit vertically
                targetHeight = Math.min(outputTileWidth*29/16, outputTileHeight * sourceTileHeight / actualSourceHeight);
                // Stretch horizontally up to 10%.
                targetWidth = Math.min(outputTileWidth, targetHeight*16/29*1.1);
            }
            targetWidth = Math.floor(targetWidth + .001);
            targetHeight = Math.floor(targetHeight + .001);
            const smallTile = Resize(bigTile, sourceTileWidth, sourceTileHeight, targetWidth, targetHeight, subPixelPositioning);
            const tempCanvas = document.createElement("canvas");
            tempCanvas.width = outputTileWidth;
            tempCanvas.height = outputTileHeight;
            tempCanvas.getContext("2d").putImageData(smallTile,
                Math.round((outputTileWidth - targetWidth) / 2),
                Math.round((outputTileHeight - targetHeight) / 2));
            outputCtx.drawImage(tempCanvas, c*outputTileWidth, r*outputTileHeight);
        }
    }

    // floor
    const noiseImgData = Noise(outputTileWidth, outputTileHeight);
    //outputCtx.putImageData(noiseImgData, 2*outputTileWidth, 4*outputTileHeight);

    // walls
    {
        const f = (r, c, x, y) => (((c * outputTileWidth + x) + (r * outputTileHeight + y) * outputCanvasWidth) * 4);
        const numHorizWaves = Math.max(2, Math.min(6, Math.round(outputTileWidth/4)));
        const numVertWaves = Math.max(2, Math.min(11, Math.round(outputTileHeight/4)));
        const imgData = outputCtx.getImageData(0, 0, outputCanvasWidth, outputCanvasHeight);
        const data = imgData.data;
        for (let y = 0; y < outputTileHeight; y++) {
            for (let x = 0; x < outputTileWidth; x++) {
                const value = Math.sin((x / outputTileWidth * numHorizWaves + y / outputTileHeight * numVertWaves) * Math.PI * 2) / 2 + 0.5;
                data[f(5, 1, x, y)] = 255;
                data[f(5, 1, x, y)+1] = 255;
                data[f(5, 1, x, y)+2] = 255;
                data[f(5, 1, x, y)+3] = value*255;
                if (y < outputTileHeight/2) {
                    data[f(0, 2, x, y)] = 255;
                    data[f(0, 2, x, y)+1] = 255;
                    data[f(0, 2, x, y)+2] = 255;
                    data[f(0, 2, x, y)+3] = Math.max(value*255, data[f(0, 2, x, y)+3]);
                    data[f(6, 4, x, y)] = 255;
                    data[f(6, 4, x, y)+1] = 255;
                    data[f(6, 4, x, y)+2] = 255;
                    data[f(6, 4, x, y)+3] = Math.max(value*255, data[f(6, 4, x, y)+3]);
                }
            }
        }
        outputCtx.putImageData(imgData, 0, 0);
    }

    return outputCanvas;
}
</script>
</body>
</html>